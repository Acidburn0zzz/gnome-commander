AC_INIT(gnome-commander, 1.2.4, http://bugzilla.gnome.org/enter_bug.cgi?product=gnome-commander)
AC_CONFIG_SRCDIR(src/gnome-cmd-includes.h)
AC_CONFIG_MACRO_DIR([m4])

AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

GNOME_DOC_INIT

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_CPP
AM_PROG_LEX
AM_PROG_LIBTOOL
AC_PROG_INTLTOOL([0.31])

dnl make sure we keep ACLOCAL_FLAGS around for maintainer builds to work
AC_SUBST(ACLOCAL_AMFLAGS, "$ACLOCAL_FLAGS -I m4")


dnl ===================
dnl Gettext stuff
dnl ===================

GETTEXT_PACKAGE=gnome-commander
AC_SUBST(GETTEXT_PACKAGE)
ALL_LINGUAS="ar bg ca cs de el en_CA en_GB es eu fi fr ga hr hu it nb ne nl pa pl pt pt_BR ro ru rw sk sl sq sr sr@Latn sv uk vi zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT


dnl ===================
dnl Check for libraries
dnl ===================

GLIB_REQ=2.6.0
GMODULE_REQ=2.0.0
GTK_REQ=2.6.0
GNOME_REQ=2.0.0
GNOMEUI_REQ=2.0.0
GNOMEVFS_REQ=2.0.0
LIBEXIF_REQ=0.6.12
LIBIPTCDATA_REQ=0.2.1
ID3LIB_REQ=3.8.3

AC_SUBST(GLIB_REQ)
AC_SUBST(GTK_REQ)
AC_SUBST(GNOMEUI_REQ)
AC_SUBST(GNOMEVFS_REQ)
AC_SUBST(LIBEXIF_REQ)
AC_SUBST(LIBIPTCDATA_REQ)
AC_SUBST(ID3LIB_REQ)

dnl Check for glib
AC_MSG_CHECKING(if glib >= ${GLIB_REQ} exists)
if pkg-config --exists glib-2.0 ; then
    GLIB_CFLAGS=`pkg-config --cflags glib-2.0`
    GLIB_LIBS=`pkg-config --libs glib-2.0`
    GLIB_PREFIX=`pkg-config --variable=prefix glib-2.0`
    GLIB_VERSION=`pkg-config --modversion glib-2.0`
    AC_SUBST(GLIB_VERSION)
    AC_SUBST(GLIB_PREFIX)
    AC_SUBST(GLIB_CFLAGS)
    AC_SUBST(GLIB_LIBS)

    if pkg-config --exists glib-2.0 '>=' ${GLIB_REQ} ; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR("only ${GLIB_VERSION} found")
    fi
else
    AC_MSG_ERROR(no)
fi


dnl Check for gmodule
AC_MSG_CHECKING(if gmodule >= ${GMODULE_REQ} exists)
if pkg-config --exists gmodule-2.0 ; then
    if pkg-config --exists gmodule-2.0 '>=' ${GMODULE_REQ} ; then
        AC_MSG_RESULT(yes)
        GMODULE_AVAIL="yes"
    else
        AC_MSG_ERROR("only `pkg-config --modversion gmodule-2.0` found")
        GMODULE_AVAIL="no"
    fi
else
    AC_MSG_ERROR(no)
    GMODULE_AVAIL="no"
fi
AC_SUBST(GMODULE_AVAIL)


dnl Check for gtk+
AC_MSG_CHECKING(if gtk+ >= ${GTK_REQ} exists)
if pkg-config --exists gtk+-2.0 ; then
    GTK_CFLAGS=`pkg-config --cflags gtk+-2.0`
    GTK_LIBS=`pkg-config --libs gtk+-2.0`
    GTK_PREFIX=`pkg-config --variable=prefix gtk+-2.0`
    GTK_VERSION=`pkg-config --modversion gtk+-2.0`
    AC_SUBST(GTK_VERSION)
    AC_SUBST(GTK_PREFIX)
    AC_SUBST(GTK_CFLAGS)
    AC_SUBST(GTK_LIBS)

    if pkg-config --exists gtk+-2.0 '>=' ${GTK_REQ} ; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR("only ${GTK_VERSION} found")
    fi
else
    AC_MSG_ERROR(no)
fi


dnl Check for libgnome
AC_MSG_CHECKING(if libgnome >= ${GNOME_REQ} exists)
if pkg-config --exists libgnome-2.0 ; then
    GNOME_CFLAGS=`pkg-config --cflags libgnome-2.0`
    GNOME_LIBS=`pkg-config --libs libgnome-2.0`
    GNOME_PREFIX=`pkg-config --variable=prefix libgnome-2.0`
    GNOME_VERSION=`pkg-config --modversion libgnome-2.0`
    AC_SUBST(GNOME_VERSION)
    AC_SUBST(GNOME_PREFIX)
    AC_SUBST(GNOME_LIBS)
    AC_SUBST(GNOME_CFLAGS)

    if pkg-config --exists libgnome-2.0 '>=' ${GNOME_REQ} ; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR("only ${GNOME_VERSION} found")
    fi
else
    AC_MSG_ERROR(no)
fi


dnl Check for libgnomeui
AC_MSG_CHECKING(if libgnomeui >= ${GNOMEUI_REQ} exists)
if pkg-config --exists libgnomeui-2.0 ; then
    GNOMEUI_CFLAGS=`pkg-config --cflags libgnomeui-2.0`
    GNOMEUI_LIBS=`pkg-config --libs libgnomeui-2.0`
    GNOMEUI_PREFIX=`pkg-config --variable=prefix libgnomeui-2.0`
    GNOMEUI_VERSION=`pkg-config --modversion libgnomeui-2.0`
    AC_SUBST(GNOMEUI_VERSION)
    AC_SUBST(GNOMEUI_PREFIX)
    AC_SUBST(GNOMEUI_CFLAGS)
    AC_SUBST(GNOMEUI_LIBS)

    if pkg-config --exists libgnomeui-2.0 '>=' ${GNOMEUI_REQ} ; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR("only ${GNOMEUI_VERSION} found")
    fi
else
    AC_MSG_ERROR(no)
fi


dnl Check for gnome-vfs
AC_MSG_CHECKING(if gnome-vfs >= ${GNOMEVFS_REQ} exists)
if pkg-config --exists gnome-vfs-2.0 ; then
    GNOMEVFS_CFLAGS=`pkg-config --cflags gnome-vfs-2.0`
    GNOMEVFS_LIBS=`pkg-config --libs gnome-vfs-2.0`
    GNOMEVFS_PREFIX=`pkg-config --variable=prefix gnome-vfs-2.0`
    GNOMEVFS_VERSION=`pkg-config --modversion gnome-vfs-2.0`
    AC_SUBST(GNOMEVFS_VERSION)
    AC_SUBST(GNOMEVFS_PREFIX)
    AC_SUBST(GNOMEVFS_CFLAGS)
    AC_SUBST(GNOMEVFS_LIBS)

    if pkg-config --exists gnome-vfs-2.0 '>=' ${GNOMEVFS_REQ} ; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_ERROR("only ${GNOMEVFS_VERSION} found")
    fi
else
    AC_MSG_ERROR(no)
fi


dnl Check for libexif support
AC_ARG_WITH(libexif, [  --without-libexif	  disable EXIF support])
have_exif=no
if test x$with_libexif != xno; then
    PKG_CHECK_MODULES(EXIF, libexif >= $LIBEXIF_REQ, have_exif=yes, have_exif=no)
fi
if test "x$have_exif" = "xyes"; then
   AC_DEFINE(HAVE_EXIF, 1, [Define to 1 if you have libexif support])
fi


dnl Check for libiptcdata support
AC_ARG_WITH(libiptcdata, [  --without-libiptcdata	  disable IPTC support])
have_iptc=no
if test x$with_libiptcdata != xno; then
    PKG_CHECK_MODULES(IPTCDATA, libiptcdata >= $LIBIPTCDATA_REQ, have_iptc=yes, have_iptc=no)
fi
if test "x$have_iptc" = "xyes"; then
   AC_DEFINE(HAVE_IPTC, 1, [Define to 1 if you have libiptcdata support])
fi


dnl Check for liblcms support
AC_ARG_WITH(cms, [  --without-cms	          disable colour management support])
have_lcms=no
if test x$with_cms != xno; then
    PKG_CHECK_MODULES(LCMS, lcms, have_lcms=yes, have_lcms=no)
fi
if test "x$have_lcms" = "xyes"; then
  AC_DEFINE(HAVE_LCMS,1,[Define to 1 if you have liblcms support])
fi
AM_CONDITIONAL(ENABLE_LCMS, test x$have_lcms = xyes)


dnl Check for id3lib support
AC_ARG_WITH(id3lib, [  --without-id3lib	  disable ID3 support])
have_id3=no
if test x$with_id3lib != xno; then
    AC_SEARCH_LIBS(ID3Tag_Link, "id3" "id3 -lstdc++" "id3 -lz" "id3 -lz -lstdc++", have_id3=yes, AC_MSG_WARN(id3lib not found); have_id3=no)
fi
if test "x$have_id3" = "xyes"; then
   AC_DEFINE(HAVE_ID3, 1, [Define to 1 if you have id3lib support])
fi


dnl Check for libchm support
AC_ARG_WITH(libchm, [  --without-libchm	  disable CHM support])
have_chm=no
AC_CHECK_LIB(chm, chm_open, have_chm=yes, have_chm=no)
AM_CONDITIONAL(HAVE_CHM, test "x$have_chm" = "xyes")


dnl =============================
dnl Checks for library functions
dnl =============================

AC_FUNC_MMAP


dnl =====================
dnl Set stuff in config.h
dnl =====================

dnl Get the prefix
if test "x${prefix}" = "xNONE"; then
  PREFIX="${ac_default_prefix}"
  AC_DEFINE_UNQUOTED(PREFIX, "${ac_default_prefix}", [definition of PREFIX])
else
  PREFIX="${prefix}"
  AC_DEFINE_UNQUOTED(PREFIX, "${prefix}", [definition of PREFIX])
fi
AC_SUBST(PREFIX)


dnl Set PACKAGE_LOCALE_DIR in config.h.
AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${PREFIX}/${DATADIRNAME}/locale", [definition of PACKAGE_LOCALE_DIR])


dnl Set PIXMAPS_DIR in config.h.
AC_DEFINE_UNQUOTED(PIXMAPS_DIR, "${PREFIX}/share/pixmaps/${PACKAGE}", [pixmaps location])


dnl Set GNOME_PREFIX in config.h.
GNOME_PREFIX_TMP=`pkg-config --variable=prefix libgnome-2.0`
AC_DEFINE_UNQUOTED(GNOME_PREFIX, "$GNOME_PREFIX_TMP", "")


dnl Set DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Directory of data files])
  else
    AC_DEFINE_UNQUOTED(DATA_DIR, "${prefix}/share/${PACKAGE}", [Directory of data files])
  fi
else
  AC_DEFINE_UNQUOTED(DATA_DIR, "${datadir}/${PACKAGE}", [Directory of data files])
fi


dnl Set HELP_DIR in config.h.
AC_DEFINE_UNQUOTED(HELP_DIR, "${PREFIX}/share/gnome/help/${PACKAGE}", "")


PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
AC_SUBST(PLUGIN_LIBTOOL_FLAGS)


dnl =====================
dnl Write some output
dnl =====================

AC_OUTPUT([
Makefile
data/gnome-commander.spec
data/gnome-commander.desktop.in
data/Makefile
doc/Makefile
libgcmd/Makefile
pixmaps/device-icons/Makefile
pixmaps/file-type-icons/Makefile
pixmaps/Makefile
pixmaps/mime-icons/Makefile
plugins/cvs/Makefile
plugins/fileroller/Makefile
plugins/Makefile
plugins/test/Makefile
po/Makefile.in
src/Makefile
src/tags/Makefile
src/tags/id3lib/Makefile
src/libgviewer/Makefile
tests/Makefile
tests/gviewer/Makefile
README
])



echo ""
echo ""
echo "=========================================="
echo " Ready to build GNOME Commander ${VERSION}"
echo "=========================================="
echo ""
echo "The following settings will be used:"
echo ""
echo "  host           : ${host}"
echo "  prefix         : ${prefix}"
echo "  module support : ${GMODULE_AVAIL}"
echo "  compiler       : ${CC}"
echo "  CFLAGS         : ${CFLAGS}"
echo "  LDFLAGS        : ${LDFLAGS}"
echo ""
echo ""
echo "Optional file metadata support:"
echo ""
echo "  Exif support   : ${have_exif}"
echo "  IPTC support   : ${have_iptc}"
echo "  ID3 support    : ${have_id3}"
echo ""
echo ""
echo "The following libraries will be used:"
echo ""
echo "  glib     : ${GLIB_VERSION}    in ${GLIB_PREFIX}"
echo "  gtk+     : ${GTK_VERSION}    in ${GTK_PREFIX}"
echo "  gnome    : ${GNOME_VERSION}    in ${GNOME_PREFIX}"
echo "  gnomeui  : ${GNOMEUI_VERSION}    in ${GNOMEUI_PREFIX}"
echo "  gnome-vfs: ${GNOMEVFS_VERSION}    in ${GNOMEVFS_PREFIX}"
echo ""
echo ""
echo ""
echo "Type 'make' to build $PACKAGE-$VERSION and then 'make install' to install"
echo ""
